#!/usr/bin/python3
"""
This is a simple vector ascii character set generated from;

https://github.com/Stypox/text-to-gcode

The original raw font vectors has the following characteristics;

* [base line](https://en.wikipedia.org/wiki/Baseline_(typography)) at y=0.0
* [mean line](https://en.wikipedia.org/wiki/Mean_line) at y=4.27,
* [cap-height](https://en.wikipedia.org/wiki/Cap_height) at y=6.04.
* [descenders](https://en.wikipedia.org/wiki/Descender) to y=-1.64->-1.76
* [ascenders](https://en.wikipedia.org/wiki/Ascender_(typography)) to y=6.03
* [overshoot](https://en.wikipedia.org/wiki/Overshoot_(typography)) of 0.11.
* The left edge on x=0.

All characters fit within a bounding box of ((x0=0, y0=-1.76), (x1=7.71,
y1=6.87)) for a body height of 8.63, but there are 3 or 4 glyphs that stand
out as unusual and make this bigger than it probably should be.

* '$' is 6.87 high, which is 0.67 taller than 6.2 for the next tallest glyph.
  It looks like this was rendered from 'S' with a vertical line through it,
  and this line is higher than normal for the rest of the font.
* 'p' and 'q' have lower descenders down to -1.76 compared to -1.64 for the others.
* '@' is 6.20 high compared to 6.15 for overshoot-caps or 6.16 for '(' and ')'.

If we resize '$' down to 6.2 to match '@' and shorten the 'p' and 'q'
descenders to match at -1.64, this becomes a body height of 7.84, or giving
them a little space 8.0, with 6.25 above the base line and 1.75 below.

So these modifications have been applied to the font below.

For fixed width you could consider them as 8mmx8mm including spacing, but note
the project they are taken from rendered them proportional taking into acount
the width of each character, so they will not render nice at fixed widths
without at least first centering them in the 8mm wide character cell. It might
also be worth re-scaling them horizontally for better fixed-width appearance.

Each letter is a tuple of lines, where each line is a tuple of points, and
each point is an (x,y) tuple. Note a dot is a line with two identical points,
but it needs to be transformed into a small horizontal line for 3D printing.
"""
import math

glyphs = {
 '\n': (),
 ' ': (),
 '!': (((0.0, 6.03), (0.0, 1.76)), ((0.0, 0.0), (0.0, 0.0))),
 '"': (((0.0, 6.03), (0.0, 4.35)), ((1.47, 4.35), (1.47, 6.03))),
 '#': (((0.51, 4.09), (5.03, 4.09)), ((4.15, 5.98), (2.67, 0.0)),
       ((4.52, 1.94), (0.0, 1.94)), ((0.88, 0.0), (2.36, 5.98))),
 '$': (((3.26, 5.71), (2.6, 6.04), (1.95, 6.15), (1.65, 6.14), (1.03, 6.0),
        (0.57, 5.65), (0.3, 5.13), (0.19, 4.55), (0.31, 4.07), (0.62, 3.63),
        (1.08, 3.39), (2.67, 3.0), (3.25, 2.7), (3.65, 2.15), (3.79, 1.52),
        (3.65, 0.88), (3.26, 0.37), (2.68, 0.03), (1.95, -0.11), (1.65, -0.11),
        (1.02, 0.07), (0.51, 0.42), (0.16, 0.9), (0.0, 1.46)),
       ((1.8, -0.89), (1.8, 6.87))),
 '%': (((1.27, 6.14), (1.79, 6.03), (2.19, 5.72), (2.44, 5.21), (2.53, 4.53),
        (2.19, 3.35), (1.27, 2.94), (0.34, 3.35), (0.0, 4.53), (0.34, 5.72),
        (1.27, 6.14)),
       ((4.79, 6.03), (1.1, 0.0)),
       ((3.37, 1.5), (3.7, 2.67), (4.63, 3.09), (5.56, 2.67), (5.9, 1.5),
        (5.56, 0.31), (4.63, -0.11), (3.7, 0.31), (3.37, 1.5))),
 '&': (((4.45, 3.21), (4.0, 1.36), (3.79, 0.94), (3.34, 0.43), (2.87, 0.11),
        (2.36, -0.06), (1.84, -0.11), (1.12, 0.02), (0.53, 0.39), (0.14, 0.94),
        (0.0, 1.63), (0.31, 2.62), (0.78, 3.04), (1.24, 3.37), (1.88, 3.55),
        (2.38, 3.72), (2.76, 4.07), (3.01, 4.45), (3.1, 4.84), (2.99, 5.33),
        (2.7, 5.73), (2.27, 6.0), (1.73, 6.09), (1.21, 6.01), (0.79, 5.77),
        (0.51, 5.38), (0.41, 4.84), (0.62, 4.24), (4.97, 0.39)),),
 "'": (((0.0, 6.03), (0.0, 4.35)),),
 '(': (((1.63, 6.16), (0.96, 5.41), (0.45, 4.56), (0.11, 3.63), (0.0, 2.68),
        (0.11, 1.72), (0.45, 0.79), (0.96, -0.06), (1.63, -0.81)),),
 ')': (((0.0, 6.16), (0.67, 5.41), (1.18, 4.56), (1.52, 3.63), (1.63, 2.68),
        (1.52, 1.72), (1.18, 0.79), (0.67, -0.06), (0.0, -0.81)),),
 '*': (((0.59, 4.36), (3.58, 1.34)), ((2.09, 0.76), (2.09, 4.97)),
       ((3.58, 4.36), (0.59, 1.34)), ((0.0, 2.85), (4.17, 2.85))),
 '+': (((1.67, 4.17), (1.67, 0.85)), ((0.0, 2.51), (3.31, 2.51))),
 ',': (((0.8, 0.8), (0.8, 0.0), (0.6, -0.83), (0.0, -1.14)),),
 '-': (((0.0, 2.51), (3.32, 2.51)),),
 '.': (((0.0, 0.4), (0.0, 0.4)),),
 '/': (((0.0, -0.14), (3.58, 5.94)),),
 '0': (((2.16, 6.14), (3.08, 5.89), (3.77, 5.22), (4.19, 4.22), (4.34, 3.02),
        (4.19, 1.82), (3.76, 0.82), (3.08, 0.14), (2.16, -0.11), (1.25, 0.14),
        (0.57, 0.82), (0.14, 1.82), (0.0, 3.02), (0.14, 4.21), (0.56, 5.21),
        (1.24, 5.89), (2.16, 6.14)),),
 '1': (((0.0, 4.47), (0.84, 4.9), (1.49, 5.45), (1.93, 6.03), (1.93, 0.0)),),
 '2': (((0.0, 5.25), (0.33, 5.63), (0.75, 5.91), (1.21, 6.08), (1.71, 6.14),
        (2.37, 6.03), (2.9, 5.69), (3.23, 5.17), (3.36, 4.5), (3.19, 3.81),
        (2.68, 3.18), (1.3, 2.06), (0.77, 1.33), (0.07, 0.0), (3.31, 0.0)),),
 '3': (((0.08, 4.71), (0.29, 5.31), (0.66, 5.77), (1.17, 6.05), (1.78, 6.14),
        (2.47, 6.02), (2.99, 5.69), (3.31, 5.2), (3.43, 4.58), (3.3, 4.21),
        (3.05, 3.9), (2.4, 3.5), (1.62, 3.22), (2.4, 3.02), (3.03, 2.73),
        (3.55, 2.23), (3.74, 1.72), (3.6, 0.97), (3.2, 0.39), (2.6, 0.02),
        (1.85, -0.11), (1.13, 0.0), (0.56, 0.3), (0.18, 0.78), (0.0, 1.41)),),
 '4': (((3.04, 0.0), (3.04, 6.03), (0.0, 2.07), (4.11, 2.07)),),
 '5': (((3.53, 6.03), (0.42, 6.03), (0.17, 2.95), (0.68, 3.5), (0.97, 3.7),
        (1.31, 3.83), (1.66, 3.88), (2.01, 3.9), (2.73, 3.75), (3.3, 3.35),
        (3.68, 2.74), (3.82, 2.0), (3.7, 1.17), (3.32, 0.5), (2.7, 0.05),
        (1.82, -0.11), (1.15, -0.01), (0.6, 0.28), (0.21, 0.75), (0.0, 1.4)),),
 '6': (((3.63, 4.78), (3.07, 5.79), (2.03, 6.14), (1.12, 5.93), (0.49, 5.3),
        (0.13, 4.24), (0.0, 2.79), (0.13, 1.55), (0.51, 0.64), (1.12, 0.08),
        (1.96, -0.11), (2.75, 0.05), (3.32, 0.49), (3.65, 1.14), (3.76, 1.91),
        (3.64, 2.63), (3.3, 3.24), (2.76, 3.65), (2.05, 3.8), (1.23, 3.64),
        (0.48, 3.19), (0.0, 2.79)),),
 '7': (((0.0, 6.03), (3.81, 6.03), (1.08, 0.0)),),
 '8': (((1.82, 6.1), (2.45, 6.01), (2.95, 5.74), (3.29, 5.29), (3.41, 4.67),
        (3.16, 3.86), (2.64, 3.4), (1.0, 2.9), (0.3, 2.41), (0.0, 1.54),
        (0.14, 0.82), (0.52, 0.31), (1.1, -0.01), (1.82, -0.11), (2.54, -0.01),
        (3.12, 0.31), (3.5, 0.82), (3.64, 1.54), (3.34, 2.41), (2.64, 2.9),
        (1.0, 3.4), (0.48, 3.86), (0.23, 4.67), (0.35, 5.29), (0.69, 5.74),
        (1.19, 6.01), (1.82, 6.1)),),
 '9': (((0.12, 1.21), (0.65, 0.23), (1.7, -0.11), (2.61, 0.09), (3.24, 0.71),
        (3.61, 1.75), (3.74, 3.19), (3.61, 4.45), (3.23, 5.38), (2.62, 5.95),
        (1.78, 6.14), (1.02, 5.98), (0.46, 5.52), (0.12, 4.86), (0.0, 4.08),
        (0.13, 3.35), (0.48, 2.76), (1.02, 2.35), (1.73, 2.2), (2.23, 2.25),
        (2.65, 2.37), (3.0, 2.55), (3.74, 3.19)),),
 ':': (((0.0, 2.87), (0.0, 2.87)), ((0.0, 0.4), (0.0, 0.4))),
 ';': (((0.8, 2.87), (0.8, 2.87)),
       ((0.8, 0.8), (0.8, 0.0), (0.6, -0.83), (0.0, -1.14))),
 '<': (((4.52, 5.25), (0.0, 2.87), (4.52, 0.49)),),
 '=': (((0.0, 3.15), (3.0, 3.15)), ((3.0, 1.89), (0.0, 1.89))),
 '>': (((0.0, 5.25), (4.52, 2.87), (0.0, 0.49)),),
 '?': (((0.0, 4.41), (0.15, 5.1), (0.51, 5.65), (1.05, 6.01), (1.73, 6.14),
        (2.33, 6.03), (2.81, 5.72), (3.14, 5.25), (3.26, 4.66), (3.19, 4.17),
        (3.01, 3.78), (2.73, 3.45), (2.38, 3.16), (2.09, 2.9), (1.85, 2.63),
        (1.6, 2.32), (1.46, 1.94), (1.41, 1.42)),
       ((1.41, 0.0), (1.41, 0.0))),
 '@': (((4.65, -0.82), (4.01, -0.92), (3.32, -0.95), (1.98, -0.68),
        (0.93, 0.06), (0.24, 1.2), (0.0, 2.63), (0.26, 4.03), (0.97, 5.17),
        (2.03, 5.93), (3.34, 6.2), (4.67, 5.95), (5.67, 5.24), (6.31, 4.13),
        (6.53, 2.7), (6.44, 1.79), (6.18, 1.05), (5.79, 0.54), (5.28, 0.35),
        (4.97, 0.4), (4.68, 0.54), (4.44, 0.8), (4.26, 1.19), (4.25, 4.42)),
       ((4.25, 3.88), (3.68, 4.27), (3.21, 4.36), (2.56, 4.23), (2.05, 3.86),
        (1.7, 3.29), (1.57, 2.56), (1.67, 1.8), (1.95, 1.22), (2.39, 0.85),
        (2.97, 0.72), (3.65, 0.83), (4.26, 1.3))),
 'A': (((0.0, 0.0), (2.71, 6.04), (5.42, 0.0)), ((4.47, 2.12), (0.95, 2.12))),
 'B': (((0.0, 6.04), (1.73, 6.04), (2.42, 5.86), (2.97, 5.51), (3.15, 5.28),
        (3.38, 4.55), (3.29, 4.12), (3.16, 3.69), (2.7, 3.33), (1.8, 3.02),
        (0.0, 3.02)),
       ((1.8, 3.02), (3.16, 2.71), (3.56, 2.35), (3.75, 1.92), (3.84, 1.49),
        (3.61, 0.76), (3.43, 0.53), (2.88, 0.18), (2.19, 0.0), (0.0, 0.0),
        (0.0, 6.04))),
 'C': (((5.12, 4.42), (4.82, 5.12), (4.29, 5.66), (3.59, 6.02), (2.76, 6.15),
        (1.61, 5.93), (0.74, 5.31), (0.19, 4.33), (0.0, 3.02), (0.19, 1.71),
        (0.74, 0.73), (1.61, 0.11), (2.76, -0.11), (3.59, 0.02), (4.29, 0.38),
        (4.82, 0.92), (5.12, 1.62)),),
 'D': (((0.0, 6.03), (1.82, 6.03), (3.16, 5.85), (4.11, 5.29), (4.68, 4.37),
        (4.87, 3.02), (4.68, 1.67), (4.11, 0.75), (3.16, 0.19), (1.82, 0.01),
        (0.0, 0.01), (0.0, 6.03)),),
 'E': (((4.21, 6.04), (0.0, 6.04), (0.0, 0.0), (4.21, 0.0)),
       ((0.0, 3.02), (3.75, 3.02))),
 'F': (((4.21, 6.04), (0.0, 6.04), (0.0, 0.0)), ((0.0, 3.02), (3.75, 3.02))),
 'G': (((5.41, 4.41), (5.1, 5.12), (4.55, 5.67), (3.78, 6.02), (2.86, 6.15),
        (1.7, 5.93), (0.8, 5.31), (0.21, 4.33), (0.0, 3.02), (0.21, 1.71),
        (0.8, 0.73), (1.7, 0.11), (2.86, -0.11), (3.78, 0.02), (4.1, 0.1),
        (4.64, 0.38), (5.1, 0.8), (5.55, 1.5), (5.55, 2.72), (3.2, 2.72)),),
 'H': (((0.0, 6.04), (0.0, 0.0)), ((0.0, 3.22), (4.61, 3.22)),
       ((4.61, 0.0), (4.61, 6.04))),
 'I': (((0.0, 6.04), (0.0, 0.0)),),
 'J': (((0.0, 1.49), (0.1, 0.83), (0.41, 0.33), (0.89, 0.0), (1.51, -0.11),
        (2.21, 0.0), (2.7, 0.34), (3.0, 0.96), (3.1, 1.89), (3.1, 6.04)),),
 'K': (((0.0, 6.04), (0.0, 0.0)), ((4.38, 0.0), (1.72, 3.61)),
       ((0.0, 2.1), (4.48, 6.04))),
 'L': (((0.0, 6.04), (0.0, 0.0), (3.56, 0.0)),),
 'M': (((0.0, 0.0), (0.0, 6.04), (2.85, 0.0), (5.69, 6.04), (5.69, 0.0)),),
 'N': (((0.0, 0.0), (0.0, 6.04), (4.7, 0.0), (4.7, 6.04)),),
 'O': (((0.81, 5.3), (1.71, 5.93), (2.85, 6.15), (3.99, 5.93), (4.89, 5.3),
        (5.49, 4.32), (5.7, 3.02), (5.49, 1.72), (4.89, 0.74), (3.99, 0.11),
        (2.85, -0.11), (1.71, 0.11), (0.81, 0.74), (0.21, 1.72), (0.0, 3.02),
        (0.21, 4.32), (0.81, 5.3)),),
 'P': (((0.0, 6.04), (0.0, 0.0)),
       ((0.0, 3.02), (1.8, 3.02), (3.16, 3.33), (3.56, 3.69), (3.75, 4.12),
        (3.84, 4.55), (3.61, 5.28), (3.43, 5.51), (2.88, 5.86), (2.19, 6.04),
        (0.0, 6.04))),
 'Q': (((0.81, 5.3), (1.71, 5.93), (2.85, 6.15), (3.99, 5.93), (4.89, 5.3),
        (5.49, 4.32), (5.7, 3.02), (5.49, 1.72), (4.89, 0.74), (3.99, 0.11),
        (2.85, -0.11), (1.71, 0.11), (0.81, 0.74), (0.21, 1.72), (0.0, 3.02),
        (0.21, 4.32), (0.81, 5.3)),
       ((3.56, 1.35), (5.62, -0.26))),
 'R': (((0.0, 0.0), (0.0, 6.04), (0.0, 6.04), (2.19, 6.04), (2.88, 5.86),
        (3.43, 5.51), (3.61, 5.28), (3.84, 4.55), (3.75, 4.12), (3.56, 3.69),
        (3.16, 3.33), (1.8, 3.02)),
       ((0.0, 3.02), (1.8, 3.02), (2.7, 2.7), (3.4, 1.6), (3.84, 0.0))),
 'S': (((0.0, 1.73), (0.19, 0.97), (0.67, 0.39), (1.44, 0.02), (2.51, -0.11),
        (3.38, 0.02), (4.07, 0.38), (4.52, 0.94), (4.68, 1.65), (4.49, 2.23),
        (3.95, 2.75), (1.0, 3.45), (0.4, 3.99), (0.21, 4.56), (0.36, 5.2),
        (0.78, 5.71), (1.44, 6.03), (2.28, 6.15), (3.13, 6.04), (3.81, 5.73),
        (4.28, 5.23), (4.5, 4.57)),),
 'T': (((0.0, 6.04), (4.64, 6.04)), ((2.32, 6.04), (2.32, 0.0))),
 'U': (((0.0, 6.04), (0.0, 2.53), (0.02, 1.92), (0.12, 1.31), (0.34, 0.76),
        (0.74, 0.31), (1.38, 0.0), (2.3, -0.11), (3.23, 0.0), (3.87, 0.31),
        (4.27, 0.76), (4.49, 1.31), (4.59, 1.92), (4.61, 2.53),
        (4.61, 6.04)),),
 'V': (((0.0, 6.04), (2.64, 0.0), (5.29, 6.04)),),
 'W': (((0.0, 6.04), (1.89, 0.0), (3.85, 6.04), (5.82, 0.0), (7.71, 6.04)),),
 'X': (((0.0, 6.04), (4.94, 0.0)), ((0.0, 0.0), (4.94, 6.04))),
 'Y': (((0.0, 6.04), (2.47, 3.02)), ((2.47, 0.0), (2.47, 3.02), (4.94, 6.04))),
 'Z': (((0.35, 6.04), (4.52, 6.04), (0.0, 0.0), (4.64, 0.0)),),
 '[': (((1.68, -0.96), (0.0, -0.96), (0.0, 6.03), (1.68, 6.03)),),
 '\\': (((0.0, 5.94), (3.58, -0.14)),),
 ']': (((0.0, 6.03), (1.68, 6.03), (1.68, -0.96), (0.0, -0.96)),),
 '^': (((0.0, 4.41), (1.06, 5.81), (2.11, 4.41)),),
 '_': (((0.0, -1.09), (4.4, -1.09)),),
 '`': (((0.0, 5.71), (0.64, 4.68)),),
 'a': (((0.13, 3.19), (0.6, 4.09), (1.81, 4.38), (2.57, 4.27), (3.08, 3.95),
        (3.36, 3.45), (3.45, 2.79), (3.45, 0.0)),
       ((3.45, 0.99), (3.01, 0.55), (2.57, 0.22), (2.15, 0.02), (1.74, -0.08),
        (1.32, -0.11), (0.8, -0.03), (0.38, 0.22), (0.1, 0.6), (0.0, 1.09),
        (0.16, 1.74), (0.63, 2.23), (2.5, 2.64), (3.45, 2.64))),
 'b': (((0.0, 6.03), (0.0, 0.0)),
       ((0.0, 0.89), (0.44, 0.45), (1.14, 0.01), (1.82, -0.11), (2.49, 0.05),
        (3.03, 0.51), (3.39, 1.23), (3.52, 2.18), (3.41, 3.08), (3.09, 3.78),
        (2.58, 4.22), (1.87, 4.38), (1.53, 4.34), (1.17, 4.21), (0.8, 3.97),
        (0.44, 3.59), (0.0, 2.74))),
 'c': (((3.3, 3.66), (2.95, 4.06), (2.48, 4.3), (1.9, 4.38), (1.12, 4.23),
        (0.52, 3.79), (0.14, 3.09), (0.0, 2.14), (0.14, 1.18), (0.53, 0.47),
        (1.13, 0.04), (1.9, -0.11), (2.47, -0.03), (2.95, 0.21), (3.3, 0.6),
        (3.5, 1.15)),),
 'd': (((3.52, 6.03), (3.52, 0.0)),
       ((3.52, 0.89), (3.08, 0.45), (2.38, 0.01), (1.7, -0.11), (1.03, 0.05),
        (0.49, 0.51), (0.13, 1.23), (0.0, 2.18), (0.11, 3.08), (0.43, 3.78),
        (0.94, 4.22), (1.65, 4.38), (1.99, 4.34), (2.35, 4.21), (2.72, 3.97),
        (3.08, 3.59), (3.52, 2.74))),
 'e': (((0.0, 2.14), (3.8, 2.14), (3.67, 3.08), (3.29, 3.78), (2.69, 4.23),
        (1.9, 4.38), (1.13, 4.23), (0.53, 3.78), (0.14, 3.08), (0.0, 2.14),
        (0.14, 1.19), (0.55, 0.48), (1.17, 0.04), (1.99, -0.11), (2.6, -0.03),
        (3.11, 0.22), (3.49, 0.61), (3.7, 1.15)),),
 'f': (((2.12, 6.07), (1.85, 6.08), (1.53, 6.0), (1.25, 5.77), (1.03, 5.44),
        (0.89, 4.77), (0.89, 0.0)),
       ((0.0, 4.05), (1.92, 4.05))),
 'g': (((3.52, 3.43), (3.08, 3.87), (2.71, 4.12), (2.36, 4.28), (2.01, 4.36),
        (1.69, 4.38), (1.02, 4.22), (0.48, 3.77), (0.13, 3.06), (0.0, 2.1),
        (0.1, 1.2), (0.42, 0.5), (0.94, 0.05), (1.65, -0.11), (1.97, -0.09),
        (2.31, 0.0), (2.67, 0.22), (3.08, 0.62), (3.52, 1.2)),
       ((0.15, -0.46), (0.28, -0.97), (0.61, -1.33), (1.11, -1.56),
        (1.77, -1.64), (2.53, -1.54), (3.08, -1.21), (3.41, -0.62),
        (3.52, 0.25), (3.52, 4.27))),
 'h': (((0.0, 6.03), (0.0, 0.0)),
       ((0.0, 3.1), (0.44, 3.64), (0.85, 4.02), (1.24, 4.25), (1.6, 4.35),
        (1.93, 4.38), (2.5, 4.26), (2.92, 3.95), (3.1, 3.6), (3.25, 2.83),
        (3.25, 0.0))),
 'i': (((0.0, 6.03), (0.0, 6.03)), ((0.0, 4.27), (0.0, 0.0))),
 'j': (((1.32, 6.03), (1.32, 6.03)),
       ((1.32, 4.28), (1.32, -0.18), (1.25, -0.92), (1.05, -1.37),
        (0.74, -1.59), (0.34, -1.64), (0.0, -1.63))),
 'k': (((0.0, 6.03), (0.0, 0.0)), ((3.25, 0.0), (1.3, 2.8)),
       ((0.0, 1.72), (3.07, 4.28))),
 'l': (((0.0, 6.03), (0.0, 0.0)),),
 'm': (((0.0, 4.27), (0.0, 0.0)),
       ((0.0, 3.05), (0.44, 3.64), (0.85, 4.03), (1.22, 4.25), (1.55, 4.36),
        (1.85, 4.38), (2.56, 4.1), (2.98, 3.3), (2.98, 0.0)),
       ((2.98, 3.3), (3.33, 3.88), (3.71, 4.22), (4.09, 4.35), (4.47, 4.38),
        (5.05, 4.25), (5.36, 3.99), (5.55, 3.4), (5.65, 2.83), (5.65, 0.0))),
 'n': (((0.0, 4.04), (0.0, 0.0)),
       ((0.0, 2.5), (0.42, 3.3), (0.77, 3.88), (1.15, 4.22), (1.53, 4.35),
        (1.91, 4.38), (2.49, 4.25), (2.8, 3.99), (2.99, 3.4), (3.09, 2.83),
        (3.09, 0.0))),
 'o': (((1.9, 4.38), (2.69, 4.23), (3.29, 3.79), (3.67, 3.08), (3.8, 2.14),
        (3.66, 1.19), (3.28, 0.48), (2.68, 0.04), (1.9, -0.11), (1.12, 0.04),
        (0.52, 0.48), (0.13, 1.18), (0.0, 2.14), (0.13, 3.09), (0.51, 3.79),
        (1.12, 4.23), (1.9, 4.38)),),
 'p': (((0.0, 1.53), (0.44, 0.68), (0.8, 0.3), (1.17, 0.06), (1.53, -0.07),
        (1.87, -0.11), (2.58, 0.05), (3.09, 0.49), (3.41, 1.19), (3.52, 2.09),
        (3.39, 3.04), (3.03, 3.76), (2.49, 4.22), (1.82, 4.38), (1.14, 4.26),
        (0.44, 3.82), (0.0, 3.38)),
       #((0.0, 4.27), (0.0, -1.76))), #original descender.
       ((0.0, 4.27), (0.0, -1.64))),
 'q': (((3.52, 1.53), (3.08, 0.68), (2.72, 0.3), (2.35, 0.06), (1.99, -0.07),
        (1.65, -0.11), (0.94, 0.05), (0.43, 0.49), (0.11, 1.19), (0.0, 2.09),
        (0.13, 3.04), (0.49, 3.76), (1.03, 4.22), (1.7, 4.38), (2.38, 4.26),
        (3.08, 3.82), (3.52, 3.38)),
       #((3.52, 4.27), (3.52, -1.76))), #original descender.
       ((3.52, 4.27), (3.52, -1.64))),
 'r': (((0.0, 0.0), (0.0, 4.27)),
       ((0.0, 3.05), (0.45, 3.68), (0.82, 4.04), (1.18, 4.25), (1.51, 4.36),
        (1.8, 4.38), (1.88, 4.38), (1.97, 4.37))),
 's': (((0.0, 1.15), (0.18, 0.6), (0.5, 0.2), (1.06, -0.01), (1.72, -0.11),
        (2.38, -0.01), (2.89, 0.27), (3.21, 0.69), (3.32, 1.22), (3.23, 1.66),
        (2.97, 1.99), (2.51, 2.15), (0.91, 2.3), (0.46, 2.45), (0.18, 2.79),
        (0.09, 3.27), (0.19, 3.73), (0.49, 4.08), (0.96, 4.3), (1.57, 4.38),
        (2.18, 4.3), (2.73, 4.12), (3.03, 3.81), (3.17, 3.32)),),
 't': (((2.12, -0.05), (1.85, -0.06), (1.53, 0.02), (1.25, 0.25), (1.03, 0.58),
        (0.89, 1.25), (0.89, 5.39)),
       ((0.0, 4.05), (1.92, 4.05))),
 'u': (((0.0, 4.27), (0.0, 1.44), (0.1, 0.87), (0.29, 0.28), (0.6, 0.02),
        (1.18, -0.11), (1.56, -0.08), (1.94, 0.05), (2.32, 0.39), (2.67, 0.97),
        (3.09, 1.77)),
       ((3.09, 0.0), (3.09, 4.27))),
 'v': (((0.0, 4.27), (1.82, 0.0), (3.63, 4.27)),),
 'w': (((0.0, 4.27), (1.52, 0.0), (2.85, 4.27), (4.22, 0.0), (5.7, 4.27)),),
 'x': (((0.0, 4.27), (3.55, 0.0)), ((0.0, 0.0), (3.55, 4.27))),
 'y': (((0.0, 4.27), (2.08, -0.08)),
       ((0.3, -1.62), (0.47, -1.64), (0.64, -1.64), (1.1, -1.54), (1.47, -1.25),
        (1.79, -0.76), (2.08, -0.08), (3.64, 4.27))),
 'z': (((0.16, 4.27), (3.43, 4.27), (0.0, 0.0), (3.56, 0.0)),),
 '{': (((2.25, 6.03), (1.59, 6.03), (1.29, 5.98), (1.12, 5.82), (1.03, 5.54),
        (1.0, 5.13), (0.99, 4.08), (0.87, 3.57), (0.5, 2.88), (0.0, 2.54),
        (0.5, 2.2), (0.87, 1.51), (0.99, 1.0), (1.0, -0.05), (1.03, -0.46),
        (1.12, -0.74), (1.29, -0.9), (1.59, -0.95), (2.25, -0.95)),),
 '|': (((0.0, 6.03), (0.0, -0.3)),),
 '}': (((0.0, 6.03), (0.66, 6.03), (0.96, 5.98), (1.13, 5.82), (1.22, 5.54),
        (1.25, 5.13), (1.26, 4.08), (1.38, 3.57), (1.75, 2.88), (2.25, 2.54),
        (1.75, 2.2), (1.38, 1.51), (1.26, 1.0), (1.25, -0.05), (1.22, -0.46),
        (1.13, -0.74), (0.96, -0.9), (0.66, -0.95), (0.0, -0.95)),),
 '~': (((0.0, 1.68), (0.0, 1.96), (0.08, 2.74), (0.31, 3.32), (0.71, 3.68),
        (1.31, 3.8), (1.75, 3.74), (2.07, 3.58), (2.25, 3.31), (2.7, 2.16),
        (2.88, 1.89), (3.2, 1.73), (3.64, 1.67), (4.24, 1.79), (4.64, 2.15),
        (4.87, 2.73), (4.95, 3.51), (4.95, 3.79)),)}

# # convert dots with 2 identical points to a little line.
# glyphs = {c:tuple(
#     (l[0], (l[1][0]+0.2, l[1][1]) ) if l[0] == l[1] else l for l in v)
#     for c,v in glyphs.items()}

def width(a):
  # width is 4 (half body height) for space and 0 for newline.
  if a == ' ':
    return 4
  elif a == '\n':
    return 0
  v=glyphs[a]
  xs=[x for l in v for x,_ in l]
  return max(xs) - min(xs)

def mround(v, m=0.01):
  """round a value to the nearest multiple of m."""
  return round(round(v/m)*m, 4) # round to 4 decimals to remove floating point noise.


def bbox(v):
  """Get the bounding box for a sequence of lines."""
  if v:
    xs,ys=zip(*(p for l in v for p in l))
    return (min(xs),min(ys)),(max(xs),max(ys))
  else:
    return (0,0),(0,0)


def scale(v,s=1.0,sx=None,sy=None,m=0.01):
  """scale a sequence of lines."""
  if sx is None: sx = s
  if sy is None: sy = s
  return [[(mround(x*sx,m), mround(y*sy,m)) for x,y in l] for l in v]


def translate(v, dx=0, dy=0, m=0.01):
  """move a sequence of lines."""
  return [[(mround(x+dx,m),mround(y+dy,m)) for x,y in l] for l in v]


def rotate(v, a=90, m=0.01):
  """rotate a sequence of lines counterclockwise about the origin."""
  r = pi*a/180
  s,c = math.sin(r), math.cos(r)
  return [[(mround(c*x - sy, m), mround(s*x + c*y,m)) for x,y in l] for l in v]

# Adjust '$' size to match the rest of the font.
v=glyphs['$']
v=translate(v,dy=0.11) # Shift up to preserve baseline overshoot.
ymax = max(y for l in v for _,y in l)
v=scale(v,(6.2+0.11)/ymax) # Scale so top will match '@'.
v=translate(v,dy=-0.11) # Shift back down to restore baseline overshoot.
glyphs['$'] = v

fsize = 8     # the font body size.
fbase = 6.25  # The font base line distance from the body top.
fgap = 1      # the gap between glyphs.
widths={c:width(c) for c in glyphs}


def pfont(c,fs=5,w=0.4):
  """Get the proportional font vector and width including gap for letter c."""
  s = (fs-w)/fsize
  dx = 0 if c == '\n' else (widths[c] + fgap)*s + w
  return scale(translate(glyphs[c],dx=fgap, dy=-fbase), s), dx

def ffont(c,h=5):
  """Get the fixed font vector and width including gap for letter c."""
  dx = (fsize - fgap - widths[c])/2
  dy = - fbase
  return scale(translate(glyphs[c],dx,dy),h/fsize), h

def ptext(t, x0=0, y0=0, x1=None, y1=None, fs=5, a=0, w=0.4):
  """Get the sequence of vectors for some text, optionally rotated, scaled and moved.

  If x1 or y1 are provided, they define a bounding box within which the text
  will be wrapped and truncated.

  Args:
    x0,y0: the top left corner
    x1,y1: the bottom right corner before rotation.
    fs: the font size in mm.
    a: the rotation angle to apply in degrees.
    w: the line width.
  """
  x, y = 0, 0
  xw = None if x1 is None else x1-x0
  yw = None if y1 is None else y1-y0
  v=[]
  for c in t:
    cv,dx = pfont(c,fs,w)
    if c == '\n' or (xw is not None and (x+dx) > xw):
      y -= fs
      x = 0
    if c != '\n' and (yw is None or (y-fs) > yw):
      v += translate(cv, x, y)
      x += dx
  if a: v = rotate(v,a)
  return translate(v,x0,y0)

if __name__ == '__main__':
  import pprint,sys

  bboxes = {c:bbox(v) for c,v in glyphs.items()}
  bbmax = bbox(bb for bb in bboxes.values())

  print('The glyphs max bounding box is')
  print(f'max={bbmax}')

  # Look for characters that are outliers for x and y values.
  xs,ys=zip(*(p for bb in bboxes.values() for p in bb))
  xmaxs = sorted(set(bb[1][0] for bb in bboxes.values()))
  ymins = sorted(set(bb[0][1] for bb in bboxes.values()))
  ymaxs = sorted(set(bb[1][1] for bb in bboxes.values()))
  print(f'xmax range  is {xmaxs[:6]}...{xmaxs[-6:]}')
  print(f'ymin range  is {ymins[:6]}...{ymins[-6:]}')
  print(f'ymax range  is {ymaxs[:6]}...{ymaxs[-6:]}')

  for x in xmaxs:
    cs=list(c for c in bboxes if x == bboxes[c][1][0])
    print(f'x={x} is in {cs}')

  for y in ymins:
    cs=list(c for c in bboxes if y == bboxes[c][0][1])
    print(f'ymin={y} is in {cs}')

  for y in ymaxs:
    cs=list(c for c in bboxes if y == bboxes[c][1][1])
    print(f'ymax={y} is in {cs}')
